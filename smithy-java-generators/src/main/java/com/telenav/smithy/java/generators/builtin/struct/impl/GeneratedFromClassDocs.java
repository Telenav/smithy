/* 
 * Copyright 2023 Telenav.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.telenav.smithy.java.generators.builtin.struct.impl;

import com.telenav.smithy.java.generators.builtin.struct.DocumentationContributor;
import com.telenav.smithy.java.generators.builtin.struct.StructureGenerationHelper;
import com.telenav.smithy.java.generators.builtin.struct.StructureGenerator;
import static com.telenav.smithy.java.generators.builtin.struct.impl.DefaultStructureGenerators.MAVEN_ARTIFACT_ID;
import static com.telenav.smithy.java.generators.builtin.struct.impl.DefaultStructureGenerators.MAVEN_GROUP_ID;
import com.mastfrog.util.libversion.VersionInfo;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import software.amazon.smithy.model.shapes.StructureShape;

/**
 *
 * @author Tim Boudreau
 */
final class GeneratedFromClassDocs implements DocumentationContributor<StructureShape, StructureGenerationHelper> {

    private final Class<?> generatorType;

    GeneratedFromClassDocs(Class<?> type) {
        generatorType = type;
    }

    GeneratedFromClassDocs() {
        this(StructureGenerator.class);
    }

    @Override
    public void generateDocumentation(StructureGenerationHelper target, StringBuilder docHead, StringBuilder docTail) {
        docTail.append("<p><b>Generated By:</b> <i> ").append(generatorType.getSimpleName());
        VersionInfo vi = VersionInfo.find(Registry.class, MAVEN_GROUP_ID, MAVEN_ARTIFACT_ID);
        if (vi != null) {
            if (vi.foundMavenMetadata) {
                docTail.append(" in <b>").append(vi.groupId).append(':').append(vi.artifactId).append(" version ").append(vi.version).append("</b>");
            }
            if (vi.foundGitMetadata) {
                // It is important, for repeatable builds, that the time zone
                // does not vary depending on the machine it is built on, or the
                // doc jar, at the least, will differ.
                docTail.append(" commit date ").append(vi.commitDate.withZoneSameInstant(ZoneId.of("Z")).format(DateTimeFormatter.RFC_1123_DATE_TIME)).append(" commit ").append(vi.shortCommitHash);
                if (vi.dirty) {
                    docTail.append(" <u>dirty</u>");
                }
            }
            docTail.append("</i>");
        }
    }

}
