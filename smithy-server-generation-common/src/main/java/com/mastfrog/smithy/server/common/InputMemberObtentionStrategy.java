/*
 * The MIT License
 *
 * Copyright 2022 Mastfrog Technologies.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.mastfrog.smithy.server.common;

import com.mastfrog.function.TriConsumer;
import com.mastfrog.java.vogon.ClassBuilder;
import com.telenav.smithy.names.TypeNames;
import static com.telenav.smithy.names.TypeNames.typeNameOf;
import static com.mastfrog.util.strings.Escaper.JAVA_IDENTIFIER_CAMEL_CASE;
import static com.mastfrog.util.strings.Strings.decapitalize;
import static com.telenav.smithy.names.TypeNames.simpleNameOf;
import com.telenav.smithy.utils.ShapeUtils;
import java.util.Set;
import java.util.function.Consumer;
import software.amazon.smithy.model.shapes.MemberShape;
import software.amazon.smithy.model.shapes.Shape;

/**
 *
 * @author Tim Boudreau
 */
public final class InputMemberObtentionStrategy {

    protected final Origin origin;
    protected final Shape memberTarget;
    protected final MemberShape member;
    protected final TypeNames names;

    public InputMemberObtentionStrategy(Origin type, Shape memberTarget, MemberShape member, TypeNames names) {
        this.origin = type;
        this.memberTarget = memberTarget;
        this.member = member;
        this.names = names;
        if (member != null && !memberTarget.getId().equals(member.getTarget())) {
            throw new IllegalStateException("Wrong shape for type " + memberTarget + " " + member);
        }
    }

    public Origin origin() {
        return origin;
    }

    public OriginType type() {
        return origin.type();
    }

    public String fqn() {
        return names.packageOf(memberTarget) + "." + typeNameOf(memberTarget);
    }

    @Override
    public String toString() {
        return origin.type() + " "
                + origin.qualifier() + " as " + typeNameOf(memberTarget);
    }

    public void visit(TriConsumer<Origin, Shape, MemberShape> c) {
        c.accept(origin, memberTarget, member);
    }

    public <B extends ClassBuilder.BlockBuilderBase<T, B, ?>, T> void comment(B bb) {
        bb.lineComment("InputObtentionStrategy " + memberTarget.getId() + " for " + (member == null ? null : member.getId()));
        bb.lineComment("Origin " + origin.type + " " + origin.getClass().getSimpleName());
    }

    public void decorateClass(ClassBuilder<?> cb) {
        requiredArguments(type -> {
            ShapeUtils.maybeImport(cb, type);
        });
        origin.decorateClass(cb, memberTarget);
    }

    protected void decorateConstructor(ClassBuilder.ConstructorBuilder<?> con, Set<String> typesAdded) {
        requiredArguments(type -> {
            if (typesAdded.add(type)) {
                String sn = simpleNameOf(type);
                con.addArgument(sn, decapitalize(sn));
            }
        });
        origin.decorateConstructor(con, typesAdded);
    }

    public void requiredArguments(Consumer<String> typeNames) {
        origin.requiredArguments(typeNames);
    }

    public String memberVarName() {
        return "_" + JAVA_IDENTIFIER_CAMEL_CASE.escape(member.getMemberName());
    }

    public <B extends ClassBuilder.BlockBuilderBase<T, B, ?>, T> String generateObtentionCode(ClassBuilder<?> cb, B into) {
        String v = origin.collectRawValue(cb, into, memberTarget, member);
        into.lineComment(v + " generated by " + origin.getClass().getSimpleName()
                + " for " + origin);
        return v;
    }

    void collectBoundTypes(Consumer<String> imports, Consumer<String> bindings) {
        imports.accept(fqn());
        origin.collectBoundTypes(imports, bindings);
    }

}
