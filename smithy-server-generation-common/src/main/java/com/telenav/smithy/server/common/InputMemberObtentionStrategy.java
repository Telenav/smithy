/* 
 * Copyright 2023 Telenav.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.telenav.smithy.server.common;

import com.mastfrog.function.TriConsumer;
import com.mastfrog.java.vogon.ClassBuilder;
import static com.mastfrog.util.strings.Escaper.JAVA_IDENTIFIER_CAMEL_CASE;
import static com.mastfrog.util.strings.Strings.decapitalize;
import com.telenav.smithy.names.TypeNames;
import static com.telenav.smithy.names.TypeNames.simpleNameOf;
import static com.telenav.smithy.names.TypeNames.typeNameOf;
import static com.telenav.smithy.utils.ShapeUtils.maybeImport;
import java.util.Set;
import java.util.function.Consumer;
import software.amazon.smithy.model.shapes.MemberShape;
import software.amazon.smithy.model.shapes.Shape;

/**
 *
 * @author Tim Boudreau
 */
public final class InputMemberObtentionStrategy {

    protected final Origin origin;
    protected final Shape memberTarget;
    protected final MemberShape member;
    protected final TypeNames names;

    public InputMemberObtentionStrategy(Origin type, Shape memberTarget, MemberShape member, TypeNames names) {
        this.origin = type;
        this.memberTarget = memberTarget;
        this.member = member;
        this.names = names;
        if (member != null && !memberTarget.getId().equals(member.getTarget())) {
            throw new IllegalStateException("Wrong shape for type " + memberTarget + " " + member);
        }
    }

    public Origin origin() {
        return origin;
    }

    public OriginType type() {
        return origin.type();
    }

    public String fqn() {
        return names.packageOf(memberTarget) + "." + typeNameOf(memberTarget);
    }

    @Override
    public String toString() {
        return origin.type() + " "
                + origin.qualifier() + " as " + typeNameOf(memberTarget);
    }

    public void visit(TriConsumer<Origin, Shape, MemberShape> c) {
        c.accept(origin, memberTarget, member);
    }

    public <B extends ClassBuilder.BlockBuilderBase<T, B, ?>, T> void comment(B bb) {
        bb.lineComment("InputObtentionStrategy " + memberTarget.getId() + " for " + (member == null ? null : member.getId()));
        bb.lineComment("Origin " + origin.type + " " + origin.getClass().getSimpleName());
    }

    public void decorateClass(ClassBuilder<?> cb) {
        requiredArguments(type -> {
            maybeImport(cb, type);
        });
        origin.decorateClass(cb, memberTarget);
    }

    protected void decorateConstructor(ClassBuilder.ConstructorBuilder<?> con, Set<String> typesAdded) {
        requiredArguments(type -> {
            if (typesAdded.add(type)) {
                String sn = simpleNameOf(type);
                con.addArgument(sn, decapitalize(sn));
            }
        });
        origin.decorateConstructor(con, typesAdded);
    }

    public void requiredArguments(Consumer<String> typeNames) {
        origin.requiredArguments(typeNames);
    }

    public String memberVarName() {
        return "_" + JAVA_IDENTIFIER_CAMEL_CASE.escape(member.getMemberName());
    }

    public <B extends ClassBuilder.BlockBuilderBase<T, B, ?>, T> String generateObtentionCode(ClassBuilder<?> cb, B into) {
        String v = origin.collectRawValue(cb, into, memberTarget, member);
        into.lineComment(v + " generated by " + origin.getClass().getSimpleName()
                + " for " + origin);
        return v;
    }

    void collectBoundTypes(Consumer<String> imports, Consumer<String> bindings) {
        imports.accept(fqn());
        origin.collectBoundTypes(imports, bindings);
    }

}
