<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    #set ($gidLower = $groupId.toLowerCase())
    #set ($aidLower = $artifactId.toLowerCase())
    #set ($nameCaps = $artifactId.substring(0, 1).toUpperCase() + $artifactId.substring(1))

    <parent>
        <groupId>\${groupId}</groupId>
        <artifactId>\${aidLower}-parent</artifactId>
        <version>\${version}</version>
    </parent>

    <artifactId>\${aidLower}-model</artifactId>
    <name>\${nameCaps} Model</name>
    <description>Smithy model of the ${nameCaps} service - contains the Smithy model
        file for editing, and regenerates code for this and its sibling projects when
        rebuilt.</description>

    <properties>
        <!-- Ensure javadoc includes generated smithy sources and builders. -->
        <sourcepath>src/main/java:target/generated-sources/smithy:target/generated-sources/annotations</sourcepath>
        <!--
        If set to true, code generators will emit a single stack
        trace line as a line comment preceding lines of code such as
        assignments, invocations, if/thens, and similar, for tracking
        down the exact line of generation code that caused a particular
        line of code to be emitted.
        -->
        <smithy-generators-debug>false</smithy-generators-debug>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>${project.groupId}</groupId>
                <artifactId>smithy-maven-plugin</artifactId>
                <!-- Note:  The parent pom \${aidLower}-parent specifies
                a substantial list of dependencies for this plugin, which
                determine what code generators actually run -->
                <executions>
                    <execution>
                        <id>smithygen</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate-smithy</goal>
                        </goals>
                        <configuration>

                            <!-- Plugins can consume settings that are defined
                            here.  Some of the ones the built-in smithy generators support:

                             * invalid.input.exception - fully qualified java class name
                               of the exception type to throw when a model object's constraints
                               are violated

                             * node-targets - comma-delimited list of strings which define
                               a list of targets to invoke with `npm run` in the generated
                               npm project that builds typescript into javascript code.
                               The defaults are `clean,build,dist`.

                             * swaggerPath - for the generated acteur server, specifies
                               the URI path generated Swagger/OpenAPI should be served on

                             * markup-regex - regular expression used by the generated
                               servers to match URI paths in inbound requests which may
                               be queries for a generated markup file.  If you are generating
                               additional markup with unusual file extensions, you may need
                               to alter it.
                               The default is
                               \\S+?\\.(?:html|css|js|ts|gif|jpg|png|sass|less|jsx|tsx|txt|json|md$)
                            -->
                            <settings>
                                <!-- If true, will generate a crude HTML UI for
                                manually testing the generated server: -->
                                <generate-test-ui>true</generate-test-ui>
                            </settings>

                            <!-- What code do we want to generate?  These are the generation
                            targets passed to plugins to tell them what kind of code they
                            should generate.  Plugins can invent their own generation targets;
                            ones supported by default are:

                             * model - generate data-model classes in whatever languages are configured
                               (note you also need a plugin in the <dependencies> section above which
                               will really *do* something for that language for the model target
                             * modeltest - for Java, generate JUnit 5 tests of the generated model classes,
                               which prove they are implemented correctly (JSON and Java serialization
                               result in deserializing an object which equals() the original, constraints
                               are honored - note that you may need to use the @samples Smithy trait to
                               provide correct and incorrect examples of things like String properties
                               validated by regular expressions - the plugin will not *guess* what might
                               be a valid or invalid value).
                             * server - generate the default (Acteur) server
                             * server-spi - generate the SPI the generated servers will call, which you
                               will implement to provide business logic for the generated server
                             * client - generate a Java (and perhaps other languages) SDK client
                             * docs - generate Swagger documentation
                             * vertx-server - generate a Vert.x server

                             All of these targets only do something if, in the <dependencies> stanza
                             above for the PLUGIN (not for the project - you do not need or want this
                             stuff as runtime dependencies), there exists a plugin that will actually
                             DO something for the target + language combination in question.

                            -->
                            <targets>model,modeltest,server,server-spi,client,docs,vertx-server</targets>

                            <languages>java,typescript</languages>

                            <!-- If set to true, a line comment will precede every
                            statement in the generated typescript source, showing
                            the line of code in the smithy code generator plugin that
                            caused that line of code to be emitted.  If the generated
                            code is incorrect, this is important information for diagnosing
                            that. -->
                            <debug>\${smithy-generators-debug}</debug>

                            #set ($gidLower = $groupId.toLowerCase())
                            #set ($aidLower = $artifactId.toLowerCase())

                            <!-- Smithy generation will only run for the set of namespaces listed
                                 here - this MUST *exactly match* the namespace declaration(s) in
                                 your .smithy file.

                                 If you are using third party libraries that have their own generated
                                 code from Smithy, you would not want to generate code for them - you
                                 are already pulling in compiled code from that library.

                                 If code generation seems to run successfully and produce nothing,
                                 the namespace setting is likely to be the problem.
                            -->
                            <namespaces>${gidLower}.${aidLower}</namespaces>

                            <!-- This is where we map language + generation target to output source roots.
                                 Note that everything *underneath* these source roots will be DELETED
                                 before generation writes any files there.

                                 The mapping can either be just the generation target, or a combination
                                 of language DOT target to put sources in a particular language in a
                                 project for that language.
                            -->
                            <destinations>
                                <typescript.model>\${basedir}/../\${aidLower}-model-typescript/src/model</typescript.model>
                                <client>\${basedir}/../\${aidLower}-generated-client-sdk/src/main/java</client>
                                <server>\${basedir}/../\${aidLower}-generated-acteur-server/src/main/java</server>
                                <docs>\${basedir}/../\${aidLower}-generated-acteur-server/src/main/resources</docs>
                                <server-spi>\${basedir}/../\${aidLower}-generated-business-logic-spi/src/main/java/</server-spi>
                                <vertx-server>\${basedir}/../\${aidLower}-generated-vertx-server/src/main/java/</vertx-server>
                            </destinations>

                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.bsc.maven</groupId>
                <artifactId>maven-processor-plugin</artifactId>
                <!-- Needed to generate builders from Smithy sources - there
                appears to be no way to convince javac via the maven-compiler-plugin
                to run an annotation processor pass over generated sources. -->
                <executions>
                    <execution>
                        <id>annogen</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>process</goal>
                        </goals>
                        <configuration>
                            <processors>
                                <processor>
                                    com.mastfrog.builder.annotation.processors.BuilderAnnotationProcessor
                                </processor>
                            </processors>
                            <outputDirectory>\${project.build.directory}/generated-sources/annotations</outputDirectory>
                            <appendSourceArtifacts>true</appendSourceArtifacts>
                            <additionalSourceDirectories>
                                <additionalSourceDirectory>
                                    \${project.basedir}/target/generated-sources/smithy
                                </additionalSourceDirectory>
                                <additionalSourceDirectory>
                                    \${project.basedir}/target/generated-sources/annotations
                                </additionalSourceDirectory>
                            </additionalSourceDirectories>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>target/generated-sources/smithy</source>
                                <source>target/generated-sources/annotations</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <compilerArgs>
                        <arg>-sourcepath</arg>
                        <arg>src/main/java:target/generated-sources/smithy:target/generated-sources/annotations</arg>
                        <arg>-d</arg>
                        <arg>\${basedir}/target/classes</arg>
                        <arg>-implicit:class</arg>
                    </compilerArgs>
                    <buildDirectory>target/classes</buildDirectory>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M7</version>

                <configuration>

                    <parallel>all</parallel>
                    <parallelMavenExecution>true</parallelMavenExecution>
                    <perCoreThreadCount>6</perCoreThreadCount>
                    <threadCount>20</threadCount>
                    <forkCount>16</forkCount>
                    <reuseForks>true</reuseForks>
                    <trimStackTrace>false</trimStackTrace>
                    <useFile>false</useFile>

                    <systemPropertyVariables>
                        <junit.jupiter.execution.parallel.enabled>true</junit.jupiter.execution.parallel.enabled>
                        <unit.test>true</unit.test>
                        <acteur.debug>false</acteur.debug>
                        <forkNumber>${surefire.forkNumber}</forkNumber>
                        <system.exit.on.bind.failure>false</system.exit.on.bind.failure>
                    </systemPropertyVariables>

                    <properties>
                        <configurationProperties>
                            <junit.jupiter.execution.parallel.config.dynamic.factor>3</junit.jupiter.execution.parallel.config.dynamic.factor>
                            <junit.jupiter.execution.parallel.enabled>true</junit.jupiter.execution.parallel.enabled>
                            <junit.jupiter.execution.parallel.mode.default>concurrent</junit.jupiter.execution.parallel.mode.default>
                            <junit.jupiter.execution.parallel.mode.classes.default>concurrent</junit.jupiter.execution.parallel.mode.classes.default>
                        </configurationProperties>
                    </properties>

                </configuration>
            </plugin>

        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mastfrog.builder</groupId>
            <artifactId>builder-annotations</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.mastfrog.builder</groupId>
            <artifactId>builder-annotation-processors</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>simple-smithy-extensions</artifactId>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>smithy-java-http-extensions</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.mastfrog</groupId>
            <artifactId>jackson-configuration</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
        </dependency>

    </dependencies>
    <!-- POM originally generated by the ${project.groupId}:${project.artifactId} Maven Plugin
    version ${project.version}. -->
</project>
