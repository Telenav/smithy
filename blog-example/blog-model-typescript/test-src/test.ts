import {
    expectValid,
    jsonConvertible,
    expectInvalid,
    expectEqual,
    findProblems,
    FailureOutput,
    TestSuite,
    TestChain,
    InputWithDescription,
    map,
    MapConsumer,
} from './generated/test-support.js';
import { createTests } from './generated/generated-tests.js';
// NodeJS imports to emit detailed output and the test report
import * as Process from 'process';
import * as util from 'util';
import * as fs from 'fs';
import * as path from 'path';
import { URL } from 'url';

// Add all of the generated tests to the suite - these test basic aspects
// of the model types, ensuring that fields match constructor arguments,
// validation works correctly, JSON serialization deserializes to an identical
// object, etc.
let suite = createTests(new TestSuite());

/* 
//   You can add your own tests here - this file is only generated by the
//   maven archetype on first invocation.  You can provide a varargs list
//   of InputWithDescription with instances of the type you want to test.
//   They will be passed each input, and can add problems to the problem
//   set if they fail, like this:

 let goodValue: InputWithDescription<MyType> = ["Good MyType", new MyType("Good")];
 suite.add(coll => {
     coll((desc: string, input: MyType, onProblem: (path: string, problem: FailureOutput) => void) => {
         if (input.value !== 'good') {
             onProblem(desc, { "Value should be 'good'": input });
         }
     });
 }, goodValue);
 */

let testFailures: Map<string, FailureOutput[]>[] | void = suite.run();


if (testFailures) {
    console.log(`${testFailures.length} test failures:`,
        util.inspect(findProblems(testFailures), null, 10000));
    // We are in an ES6 module, so __dirname, available in a CommonJS
    // node module is not defined, so...
    let outputFile = process.argv.slice(2)[0];
    if (!outputFile) {
        const __dirname = new URL('.', import.meta.url).pathname;
        outputFile = path.resolve(__dirname, '../../test/test-report.json');
    }
    // Due to inscrutable vagaries of typescript, JSON.stringify on Array
    // results in {}, so copy them into something more straightforwardly
    // a javascript array.
    let result = [];
    testFailures.forEach(item => {
        let realItem = {};
        item.forEach((v, k) => {
            realItem[k] = v;
        });
        result.push(realItem);
    });
    fs.writeFileSync(outputFile, JSON.stringify(result, null, 2));
    console.log(`Wrote test report to ${outputFile}`);
    process.exit(1);
}
